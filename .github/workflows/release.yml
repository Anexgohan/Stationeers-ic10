name: Release

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true

      - name: Build ic10lsp
        working-directory: ./anex-ic10/ic10lsp
        run: cargo build --release

      - name: Prepare binaries for packaging (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          mkdir -p ./anex-ic10/anex-ic10-language-support/bin
          cp ./anex-ic10/ic10lsp/target/release/ic10lsp ./anex-ic10/anex-ic10-language-support/bin/ic10lsp

      - name: Prepare binaries for packaging (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir -p ./anex-ic10/anex-ic10-language-support/bin
          cp ./anex-ic10/ic10lsp/target/release/ic10lsp.exe ./anex-ic10/anex-ic10-language-support/bin/ic10lsp.exe

      - name: Install Dependencies
        working-directory: ./anex-ic10/anex-ic10-language-support
        run: npm ci

      - name: Package VSCode extension
        working-directory: ./anex-ic10/anex-ic10-language-support
        run: npx vsce package

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: vsix-${{ runner.os }}
          path: ./anex-ic10/anex-ic10-language-support/*.vsix

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all VSIX artifacts
        uses: actions/download-artifact@v4
        with:
          path: vsix-artifacts

      - name: Get version from package.json
        id: package-version
        run: |
          # The package.json is not available here, so we extract from one of the artifacts
          # Unzip one of the vsix files to get the package.json
          unzip vsix-artifacts/vsix-Linux/*.vsix 'extension/package.json' -d temp-unzip
          VERSION=$(jq -r .version temp-unzip/extension/package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          files: |
            vsix-artifacts/vsix-Linux/*.vsix
            vsix-artifacts/vsix-Windows/*.vsix
            vsix-artifacts/vsix-macOS/*.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}